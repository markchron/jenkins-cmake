name: CI_INTEL

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  BUILD_TYPE: Release # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  CMAKE_BUILD_PARALLEL_LEVEL: "2" # 2 cores on each GHA VM, enable parallel builds
  CTEST_OUTPUT_ON_FAILURE: "ON" # This way we don't need a flag to ctest
  CTEST_PARALLEL_LEVEL: "2" # enable parallel ctest
  CTEST_TIME_TIMEOUT: "5" # some failures hang forever
  
jobs:
  intel-build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        os: [ubuntu-latest, macos-latest]
        fc: [ifort]
    env:
      MACOS_HPCKIT_URL: >-
        https://registrationcenter-download.intel.com/akdlm/irc_nas/17398/m_HPCKit_p_2021.1.0.2681_offline.dmg
      MACOS_FORTRAN_COMPONENTS: >-
        intel.oneapi.mac.ifort-compiler
      FC: ${{ matrix.fc }}

    steps:
    
    - name: Checkout code
      uses: actions/checkout@v2

#    - name: Set up Python 3.x
#      uses: actions/setup-python@v1
#      with:
#        python-version: 3.x

#    - name: Install CMake Linux
#      if: contains(matrix.os, 'ubuntu')
#      run: ci/install_cmake.sh

    - name: Prepare for cache restore (OSX)
      if: contains(matrix.os, 'macos')
      run: |
        sudo mkdir -p /opt/intel
        sudo chown $USER /opt/intel

    - name: Cache Intel install (OSX)
      if: contains(matrix.os, 'macos')
      id: cache-install
      uses: actions/cache@v2
      with:
        path: /opt/intel/oneapi
        key: install-${{ env.MACOS_HPCKIT_URL }}-${{ env.MACOS_FORTRAN_COMPONENTS }}

    - name: Add Intel repository (Linux)
      if: contains(matrix.os, 'ubuntu')
      run: |
        wget https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
        sudo apt-key add GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
        rm GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
        echo "deb https://apt.repos.intel.com/oneapi all main" | sudo tee /etc/apt/sources.list.d/oneAPI.list
        sudo apt-get update

    - name: Install Intel oneAPI compiler (Linux)
      if: contains(matrix.os, 'ubuntu')
      run: |
        sudo apt-get install intel-oneapi-compiler-fortran

    - name: Install Intel oneAPI compiler (OSX)
      if: contains(matrix.os, 'macos') && steps.cache-install.outputs.cache-hit != 'true'
      run: |
        curl --output webimage.dmg --url "$URL" --retry 5 --retry-delay 5
        hdiutil attach webimage.dmg
        if [ -z "$COMPONENTS" ]; then
          sudo /Volumes/"$(basename "$URL" .dmg)"/bootstrapper.app/Contents/MacOS/bootstrapper -s --action install --eula=accept --continue-with-optional-error=yes --log-dir=.
          installer_exit_code=$?
        else
          sudo /Volumes/"$(basename "$URL" .dmg)"/bootstrapper.app/Contents/MacOS/bootstrapper -s --action install --components="$COMPONENTS" --eula=accept --continue-with-optional-error=yes --log-dir=.
          installer_exit_code=$?
        fi
        hdiutil detach /Volumes/"$(basename "$URL" .dmg)" -quiet
        exit $installer_exit_code
      env:
        URL: ${{ env.MACOS_HPCKIT_URL }}
        COMPONENTS: ${{ env.MACOS_FORTRAN_COMPONENTS }}

    - name: Setup Intel oneAPI environment
      run: |
        source /opt/intel/oneapi/setvars.sh
        printenv >> $GITHUB_ENV

#    - name: Install fypp
#      run: pip install --upgrade fypp

    - name: Configure with CMake
      run: >-
         cmake -Wdev
         -DCMAKE_BUILD_TYPE=Release
         -DCMAKE_INSTALL_PREFIX=$PWD/_dist
         -S . -B build

    - name: Build and compile
      run: cmake --build build

    - name: catch build fail
      run: cmake --build build --verbose --parallel 1
      if: failure()

    - name: test
      run: ctest --parallel --output-on-failure
      working-directory: build

    - name: Install project
      run: cmake --install build
