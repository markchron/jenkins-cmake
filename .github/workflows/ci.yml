name: CMake

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  CMAKE_BUILD_PARALLEL_LEVEL: "2" # 2 cores on each GHA VM, enable parallel builds
  CTEST_OUTPUT_ON_FAILURE: "ON" # This way we don't need a flag to ctest
  CTEST_PARALLEL_LEVEL: "2" # enable parallel ctest
  CTEST_TIME_TIMEOUT: "5" # some failures hang forever
  HOMEBREW_NO_ANALYTICS: "ON" # Make Homebrew installation a little quicker
  HOMEBREW_NO_AUTO_UPDATE: "ON"
  HOMEBREW_NO_BOTTLE_SOURCE_FALLBACK: "ON"
  HOMEBREW_NO_GITHUB_API: "ON"
  HOMEBREW_NO_INSTALL_CLEANUP: "ON"

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ${{matrix.os}}
    strategy:
      fail-fast: false
      matrix:
       os: [ubuntu-latest, macos-latest]
#       gcc_v: [9, 10, 11] # version of GFortran we want to use
    env:
      FC: gfortran-${{matrix.os}}
#      FC: gfortran-${{ matrix.gcc_v} }
#      GCC_V: ${{ matrix.gcc_v} }
    
    # Pipeline on
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      
#    - name: Install CMake Linux
#      if: contains( matrix.os, 'ubuntu')
#      run: script/install_cmake.sh
    
#    - name: Install GFortran Linux
#      if: contains( matrix.os, 'ubuntu')
#      run: |
#        sudo add-apt-repository ppa:ubuntu-toolchain-r/test
#        sudo apt-get update
#        sudo apt-get install -y gcc-${GCC_V} gfortran-${GCC_V}
#        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-${GCC_V} 100 \
#        --slave /usr/bin/gfortran gfortran /usr/bin/gfortran-${GCC_V} \
#        --slave /usr/bincov gcov /usr/bin/gcov-${GCC_V}
 
    - name: Install GFortran macOS
      if: contains( matrix.os, 'macos')
      run: brew install gcc
#        brew install gcc@{GCC_V} || brew upgrade gcc@{GCC_V} || true
#        brew link gcc@${GCC_V}

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >-
        cmake -B ${{github.workspace}}/build 
        -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
        -DCMAKE_INSTALL_PREFIX=$PWD/_dist

    - name: Build and compile
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} --parallel
    
    - name: catch build fail
      run: cmake --build ${{github.workspace}}/build build --verbose --parallel 1
      if: failure()

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}} --parallel --output-on-failure
      
    - name: Install project
      run: cmake --install build
